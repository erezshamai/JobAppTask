pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('my-dockerhub-credentials-id')
        IMAGE_NAME = 'erezshamai707/my-web-app'
    }
    
    stages {
        stage('SCM Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/aviram']],
                        userRemoteConfigs: [[url: 'https://github.com/erezshamai/JobAppTask.git']]])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('.') {
                    sh "docker build -t ${IMAGE_NAME}:latest -f docker/web/Dockerfile ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Logging in to Docker Hub...'
                // This step uses the credentials ID defined in the environment block.
                // It securely provides the username and password to the 'docker login' command.
                withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"

                echo 'Pushing Docker image to Docker Hub...'
                // Pushes the image with the 'latest' tag.
                // You can also add more complex tagging strategies here.
                sh "docker push ${IMAGE_NAME}:latest"
            }
        }        
        
        stage('Run and Test Container') {
            steps {
                echo 'Running a container to test the application logic...'
                script {
                    def containerId
                    try {
                        // Start the container in detached mode (-d) and get its ID
                        containerId = sh(returnStdout: true, script: "docker run -d ${IMAGE_NAME}:latest").trim()
                        echo "Started container with ID: ${containerId}"

                        // Wait for a few seconds to let the application start
                        sleep 10

                        // Check the container logs for expected output
                        // You can customize this to look for specific success messages
                        def logs = sh(returnStdout: true, script: "docker logs ${containerId}")
                        if (logs.contains("Application started successfully")) {
                            echo "âœ… Application logic seems to be working. Logs contain the expected message."
                        } else {
                            echo "Application logic test failed. Unexpected logs:"
                            echo logs
                            currentBuild.result = 'FAILURE'
                            error 'Application test failed.'
                        }
                    } finally {
                        // Ensure the container is always stopped and removed
                        if (containerId) {
                            sh "docker stop ${containerId}"
                            sh "docker rm ${containerId}"
                            echo "Container ${containerId} stopped and removed."
                        }
                    }
                }
            }
        }
    }
}